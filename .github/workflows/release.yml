name: Universe Auto Release CI/CD

on:
  push:
    branches:
      - main
env:
  TZ: Asia/Makassar
  VERSION: ${{ github.ref_name }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  COMMIT_HASH: ${{ github.sha }}

jobs:
  build-and-deploy:
    name: Auto Build Docker Image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service-name: [api_gateway, account_service, auth_service, cart_service, checkout_service, email_service, payment_service, ppob_service, product_catalog_service]
        # service-name: [api_gateway, account_service, auth_service, cart_service, checkout_service, cms_service, email_service, payment_service, ppob_service, product_catalog_service]

    steps:
      - name: Checkout Github Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get nearest tag
        id: get_tag
        run: |
          git fetch --tags
          TAG=$(git describe --tags --abbrev=0)
          echo "TAG=$TAG" >> $GITHUB_ENV
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "VERSION=${TAG}" >> $GITHUB_ENV
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV
        shell: bash
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker Image
        run: |
          docker build -t ghcr.io/1layar/universe/${{ matrix.service-name }}:${{ env.VERSION }} -f ./manifest/docker/Dockerfile \
           --build-arg TZ=${{ env.TZ }} \
           --build-arg VERSION=${{ env.VERSION }} \
           --build-arg COMMIT_HASH=${{ env.COMMIT_HASH }} \
           --build-arg SERVICE_NAME=${{ matrix.service-name }} .
      - name: Push Docker Image
        run: |
          docker push ghcr.io/1layar/universe/${{ matrix.service-name }}:${{ env.VERSION }}
  release:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
    - name: Install Kubectl
      id: install-kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.31.0'
    - name: Install Helm
      id: install-helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.9.4'
    - name: Set up Helm
      run: |
        echo "HELM_EXPERIMENTAL_OCI=1" >> $GITHUB_ENV
    - name: Install Kustomize
      id: install-kustomize
      uses: imranismail/setup-kustomize@v1
    - name: Install krew
      run: |
          (
            set -x; cd "$(mktemp -d)" &&
            OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
            ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
            KREW="krew-${OS}_${ARCH}" &&
            curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
            tar zxvf "${KREW}.tar.gz" &&
            ./"${KREW}" install krew
          )
      shell: bash
    - name: Dump kubeconfig
      run: |
        # decode base64
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
        echo "KUBECONFIG=~/.kube/config" >> $GITHUB_ENV
        kubectl version
    - name: Deploy Psql secret
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
        echo "KUBECONFIG=~/.kube/config" >> $GITHUB_ENV
        kubectl version
        echo "${{ secrets.PSQL_SECRET }}" | base64 -d > psql-secret.yaml
        kubectl apply -f psql-secret.yaml
      